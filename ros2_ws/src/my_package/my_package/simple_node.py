import rclpy
from rclpy.node import Node

from trajectory_msgs_custom.msg import BoardInputData, BoardOutputData, CartesianSample, CurvilinearSample


class TrajectoryNode(Node):

    def __init__(self):
        super().__init__('trajectory_node')

        self.sub = self.create_subscription(
            BoardInputData,
            'board_input_data',
            self.input_callback,
            10)

        self.pub = self.create_publisher(BoardOutputData, 'board_output_data', 10)

        self.get_logger().info("TrajectoryNode started")

    def input_callback(self, msg: BoardInputData):
        self.get_logger().info(
            f"Received s={msg.s:.2f}, d={msg.d:.2f}, velocity={msg.velocity:.2f}"
        )

        # Create output message
        output = BoardOutputData()

        # Fill a CartesianSample with your actual arrays
        cart = CartesianSample()
        cart.x = [
            -11.49319552, -10.92758763, -10.34928543, -9.74769862,
            -9.11512749, -8.4461602 , -7.73825931, -6.99132937,
            -6.20791235, -5.39324446, -4.55519701, -3.70427448,
            -2.85108628, -1.99794316, -1.14482314, -0.29168435,
             0.56152095,  1.41483492,  2.26830591,  3.12189581,
             3.97557378,  4.82931944,  5.6831193 ,  6.53696499,
             7.39084591,  8.24458937,  9.09779219,  9.94975919,
            10.79908532, 11.64340164, 12.4791735
        ]
        cart.y = [
             0.45717978,  0.44074011,  0.42392604,  0.40435032,  0.37913977,
             0.35180231,  0.31947985,  0.28478635,  0.24984007,  0.21534183,
             0.18144434,  0.14762419,  0.11319033,  0.07766236,  0.04157856,
             0.00594885, -0.02803173, -0.0591798 , -0.08569596, -0.10799871,
            -0.12659047, -0.14176517, -0.1534703 , -0.16060097, -0.16008762,
            -0.14466257, -0.11147385, -0.05589287,  0.0297154 ,  0.15437655,
             0.32739215
        ]
        cart.velocity = [
            5.6347918 , 5.70208832, 5.88700569, 6.16376691, 6.50637657,
            6.88861804, 7.28404493, 7.66624166, 8.00891565, 8.2859382 ,
            8.47126056, 8.53882795, 8.53882795, 8.53882795, 8.53882795,
            8.53882795, 8.53882795, 8.53882795, 8.53882795, 8.53882795,
            8.53882795, 8.53882795, 8.53882795, 8.53882795, 8.53882795,
            8.53882795, 8.53882795, 8.53882795, 8.53882795, 8.53882795,
            8.53882795
        ]
        cart.theta = [
            -0.0377489 , -0.04045279, -0.04268257, -0.0453613 , -0.046729  ,
            -0.04820332, -0.04768171, -0.04481387, -0.04203273, -0.04013869,
            -0.03963532, -0.04034638, -0.04168741, -0.04229319, -0.04157724,
            -0.03935369, -0.03569321, -0.03086575, -0.02601315, -0.02154682,
            -0.01745147, -0.01321341, -0.00707668,  0.0031529 ,  0.01834086,
             0.03944998,  0.06674808,  0.1040134 ,  0.15307847,  0.21431993,
             0.28706871
        ]
        cart.kappa = [
            -0.00984543, -0.01151548, -0.01290821, -0.01289618, -0.01087787,
            -0.00772199, -0.00367773, -0.0003641 ,  0.00159741,  0.00183631,
             0.00077462, -0.00032491, -0.00093185, -0.00049938,  0.00077032,
             0.00245299,  0.00407459,  0.00523819,  0.00550948,  0.00526036,
             0.00501954,  0.00561404,  0.00786232,  0.01212317,  0.01778244,
             0.02411449,  0.03223227,  0.04315693,  0.0563885 ,  0.07058472,
             0.08432831
        ]
        cart.kappa_dot = [
             0.00000000e+00, -1.67005008e-03, -1.39273238e-03,  1.20317870e-05,
             2.01831625e-03,  3.15587798e-03,  4.04425581e-03,  3.31362937e-03,
             1.96151606e-03,  2.38899519e-04, -1.06169126e-03, -1.09953017e-03,
            -6.06941337e-04,  4.32466718e-04,  1.26970368e-03,  1.68266758e-03,
             1.62159904e-03,  1.16360618e-03,  2.71283526e-04, -2.49120791e-04,
            -2.40815203e-04,  5.94501197e-04,  2.24828043e-03,  4.26084823e-03,
             5.65927103e-03,  6.33205247e-03,  8.11777776e-03,  1.09246560e-02,
             1.32315746e-02,  1.41962212e-02,  1.37435829e-02
        ]
        cart.acceleration = [
            -1.04469680e-02,  6.39453268e-01,  1.16459429e+00,  1.56188568e+00,
             1.82945222e+00,  1.96424820e+00,  1.96569640e+00,  1.83410651e+00,
             1.57099685e+00,  1.17753166e+00,  6.53938827e-01,  1.17651423e-14,
            -3.92084802e-19,  2.87532334e-18,  5.13867589e-18,  5.75571926e-18,
             4.74817059e-18,  2.52396926e-18,  2.04242735e-19, -7.25900780e-19,
             7.92458537e-19,  5.28714447e-18,  1.16877232e-17,  1.77262797e-17,
             2.13542499e-17,  2.56080768e-17,  3.36990097e-17,  4.25801833e-17,
             4.83998891e-17,  4.94392080e-17,  4.73540934e-17
        ]

        curv = CurvilinearSample()
        curv.d = [
            7.58920221e-02, 5.07248644e-02, 3.14868453e-02, 1.76228871e-02,
            8.37210643e-03, 2.84215999e-03, 8.35906255e-05, -8.35826923e-04,
            -7.56740177e-04, -3.53873039e-04, -6.16799433e-05, -4.16333634e-17,
            -4.16333634e-17, -4.16333634e-17, -4.16333634e-17, -4.16333634e-17,
            -4.16333634e-17, -4.16333634e-17, -4.16333634e-17, -4.16333634e-17,
            -4.16333634e-17, -4.16333634e-17, -4.16333634e-17, -4.16333634e-17,
            -4.16333634e-17, -4.16333634e-17, -4.16333634e-17, -4.16333634e-17,
            -4.16333634e-17, -4.16333634e-17, -4.16333634e-17
        ]
        curv.dd = [
            -2.82504323e-01, -2.21309432e-01, -1.64388470e-01, -1.14171224e-01,
            -7.23440201e-02, -3.98497284e-02, -1.68877586e-02, -2.91406254e-03,
            3.35886666e-03, 3.96199440e-03, 1.66974468e-03, 2.77555756e-17,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00
        ]
        curv.ddd = [
            3.11680315e-01, 2.97624229e-01, 2.69560568e-01, 2.31206623e-01,
            1.86279688e-01, 1.38497055e-01, 9.15760166e-02, 4.92338664e-02,
            1.51878968e-02, -6.84459932e-03, -1.31463292e-02, 6.93889390e-17,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00
        ]
        curv.s = [
            156.11846786, 156.68292879, 157.2606779 , 157.86209335,
            158.49494689, 159.16440392, 159.87302345, 160.62075814,
            161.40495426, 162.2203517 , 163.05908401, 163.91067834,
            164.76456114, 165.61844393, 166.47232673, 167.32620952,
            168.18009232, 169.03397511, 169.88785791, 170.7417407 ,
            171.5956235 , 172.44950629, 173.30338909, 174.15727188,
            175.01115468, 175.86503747, 176.71892027, 177.57280306,
            178.42668586, 179.28056865, 180.13445145
        ]
        curv.ss = [
            5.61927802, 5.69158134, 5.8806979 , 6.16056397, 6.50511583,
            6.88828975, 7.28402201, 7.66624888, 8.00890663, 8.28593155,
            8.4712599 , 8.53882795, 8.53882795, 8.53882795, 8.53882795,
            8.53882795, 8.53882795, 8.53882795, 8.53882795, 8.53882795,
            8.53882795, 8.53882795, 8.53882795, 8.53882795, 8.53882795,
            8.53882795, 8.53882795, 8.53882795, 8.53882795, 8.53882795,
            8.53882795
        ]
        curv.sss = [
            2.60439441e-02, 6.75269458e-01, 1.19417634e+00, 1.58276460e+00,
            1.84103423e+00, 1.96898522e+00, 1.96661759e+00, 1.83393133e+00,
            1.57092644e+00, 1.17760292e+00, 6.53960777e-01, 1.17683641e-14,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00
        ]

        # Fill BoardOutputData
        for i in range(5):
            output.samples.append(cart)
            output.samples_curv.append(curv)
            output.feasibility.append(True)
            output.cost.append(1.23)

        self.pub.publish(output)


def main(args=None):
    rclpy.init(args=args)
    node = TrajectoryNode()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()


# feasible_trajectories[0].cartesian.x
# array([-11.49319552, -10.92758763, -10.34928543,  -9.74769862,
#         -9.11512749,  -8.4461602 ,  -7.73825931,  -6.99132937,
#         -6.20791235,  -5.39324446,  -4.55519701,  -3.70427448,
#         -2.85108628,  -1.99794316,  -1.14482314,  -0.29168435,
#          0.56152095,   1.41483492,   2.26830591,   3.12189581,
#          3.97557378,   4.82931944,   5.6831193 ,   6.53696499,
#          7.39084591,   8.24458937,   9.09779219,   9.94975919,
#         10.79908532,  11.64340164,  12.4791735 ])
# feasible_trajectories[0].cartesian.y
# array([ 0.45717978,  0.44074011,  0.42392604,  0.40435032,  0.37913977,
#         0.35180231,  0.31947985,  0.28478635,  0.24984007,  0.21534183,
#         0.18144434,  0.14762419,  0.11319033,  0.07766236,  0.04157856,
#         0.00594885, -0.02803173, -0.0591798 , -0.08569596, -0.10799871,
#        -0.12659047, -0.14176517, -0.1534703 , -0.16060097, -0.16008762,
#        -0.14466257, -0.11147385, -0.05589287,  0.0297154 ,  0.15437655,
#         0.32739215])
# feasible_trajectories[0].cartesian.v
# array([5.6347918 , 5.70208832, 5.88700569, 6.16376691, 6.50637657,
#        6.88861804, 7.28404493, 7.66624166, 8.00891565, 8.2859382 ,
#        8.47126056, 8.53882795, 8.53882795, 8.53882795, 8.53882795,
#        8.53882795, 8.53882795, 8.53882795, 8.53882795, 8.53882795,
#        8.53882795, 8.53882795, 8.53882795, 8.53882795, 8.53882795,
#        8.53882795, 8.53882795, 8.53882795, 8.53882795, 8.53882795,
#        8.53882795])
# feasible_trajectories[0].cartesian.theta
# array([-0.0377489 , -0.04045279, -0.04268257, -0.0453613 , -0.046729  ,
#        -0.04820332, -0.04768171, -0.04481387, -0.04203273, -0.04013869,
#        -0.03963532, -0.04034638, -0.04168741, -0.04229319, -0.04157724,
#        -0.03935369, -0.03569321, -0.03086575, -0.02601315, -0.02154682,
#        -0.01745147, -0.01321341, -0.00707668,  0.0031529 ,  0.01834086,
#         0.03944998,  0.06674808,  0.1040134 ,  0.15307847,  0.21431993,
#         0.28706871])
# feasible_trajectories[0].cartesian.kappa
# array([-0.00984543, -0.01151548, -0.01290821, -0.01289618, -0.01087787,
#        -0.00772199, -0.00367773, -0.0003641 ,  0.00159741,  0.00183631,
#         0.00077462, -0.00032491, -0.00093185, -0.00049938,  0.00077032,
#         0.00245299,  0.00407459,  0.00523819,  0.00550948,  0.00526036,
#         0.00501954,  0.00561404,  0.00786232,  0.01212317,  0.01778244,
#         0.02411449,  0.03223227,  0.04315693,  0.0563885 ,  0.07058472,
#         0.08432831])
# feasible_trajectories[0].cartesian.kappa_dot
# array([ 0.00000000e+00, -1.67005008e-03, -1.39273238e-03,  1.20317870e-05,
#         2.01831625e-03,  3.15587798e-03,  4.04425581e-03,  3.31362937e-03,
#         1.96151606e-03,  2.38899519e-04, -1.06169126e-03, -1.09953017e-03,
#        -6.06941337e-04,  4.32466718e-04,  1.26970368e-03,  1.68266758e-03,
#         1.62159904e-03,  1.16360618e-03,  2.71283526e-04, -2.49120791e-04,
#        -2.40815203e-04,  5.94501197e-04,  2.24828043e-03,  4.26084823e-03,
#         5.65927103e-03,  6.33205247e-03,  8.11777776e-03,  1.09246560e-02,
#         1.32315746e-02,  1.41962212e-02,  1.37435829e-02])
# feasible_trajectories[0].cartesian.a
# array([-1.04469680e-02,  6.39453268e-01,  1.16459429e+00,  1.56188568e+00,
#         1.82945222e+00,  1.96424820e+00,  1.96569640e+00,  1.83410651e+00,
#         1.57099685e+00,  1.17753166e+00,  6.53938827e-01,  1.17651423e-14,
#        -3.92084802e-19,  2.87532334e-18,  5.13867589e-18,  5.75571926e-18,
#         4.74817059e-18,  2.52396926e-18,  2.04242735e-19, -7.25900780e-19,
#         7.92458537e-19,  5.28714447e-18,  1.16877232e-17,  1.77262797e-17,
#         2.13542499e-17,  2.56080768e-17,  3.36990097e-17,  4.25801833e-17,
#         4.83998891e-17,  4.94392080e-17,  4.73540934e-17])


# trajectory.curvilinear.d
# array([ 7.58920221e-02,  5.07248644e-02,  3.14868453e-02,  1.76228871e-02,
#         8.37210643e-03,  2.84215999e-03,  8.35906255e-05, -8.35826923e-04,
#        -7.56740177e-04, -3.53873039e-04, -6.16799433e-05, -4.16333634e-17,
#        -4.16333634e-17, -4.16333634e-17, -4.16333634e-17, -4.16333634e-17,
#        -4.16333634e-17, -4.16333634e-17, -4.16333634e-17, -4.16333634e-17,
#        -4.16333634e-17, -4.16333634e-17, -4.16333634e-17, -4.16333634e-17,
#        -4.16333634e-17, -4.16333634e-17, -4.16333634e-17, -4.16333634e-17,
#        -4.16333634e-17, -4.16333634e-17, -4.16333634e-17])
# trajectory.curvilinear.d_dot
# array([-2.82504323e-01, -2.21309432e-01, -1.64388470e-01, -1.14171224e-01,
#        -7.23440201e-02, -3.98497284e-02, -1.68877586e-02, -2.91406254e-03,
#         3.35886666e-03,  3.96199440e-03,  1.66974468e-03,  2.77555756e-17,
#         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
#         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
#         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
#         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
#         0.00000000e+00,  0.00000000e+00,  0.00000000e+00])
# trajectory.curvilinear.d_ddot
# array([ 3.11680315e-01,  2.97624229e-01,  2.69560568e-01,  2.31206623e-01,
#         1.86279688e-01,  1.38497055e-01,  9.15760166e-02,  4.92338664e-02,
#         1.51878968e-02, -6.84459932e-03, -1.31463292e-02,  6.93889390e-17,
#         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
#         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
#         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
#         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
#         0.00000000e+00,  0.00000000e+00,  0.00000000e+00])
# trajectory.curvilinear.s
# array([156.11846786, 156.68292879, 157.2606779 , 157.86209335,
#        158.49494689, 159.16440392, 159.87302345, 160.62075814,
#        161.40495426, 162.2203517 , 163.05908401, 163.91067834,
#        164.76456114, 165.61844393, 166.47232673, 167.32620952,
#        168.18009232, 169.03397511, 169.88785791, 170.7417407 ,
#        171.5956235 , 172.44950629, 173.30338909, 174.15727188,
#        175.01115468, 175.86503747, 176.71892027, 177.57280306,
#        178.42668586, 179.28056865, 180.13445145])
# trajectory.curvilinear.s_dot
# array([5.61927802, 5.69158134, 5.8806979 , 6.16056397, 6.50511583,
#        6.88828975, 7.28402201, 7.66624888, 8.00890663, 8.28593155,
#        8.4712599 , 8.53882795, 8.53882795, 8.53882795, 8.53882795,
#        8.53882795, 8.53882795, 8.53882795, 8.53882795, 8.53882795,
#        8.53882795, 8.53882795, 8.53882795, 8.53882795, 8.53882795,
#        8.53882795, 8.53882795, 8.53882795, 8.53882795, 8.53882795,
#        8.53882795])
# trajectory.curvilinear.s_ddot
# array([2.60439441e-02, 6.75269458e-01, 1.19417634e+00, 1.58276460e+00,
#        1.84103423e+00, 1.96898522e+00, 1.96661759e+00, 1.83393133e+00,
#        1.57092644e+00, 1.17760292e+00, 6.53960777e-01, 1.17683641e-14,
#        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
#        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
#        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
#        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
#        0.00000000e+00, 0.00000000e+00, 0.00000000e+00])
